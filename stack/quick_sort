#include<stdio.h>
void swap(int first,int second)
{
    int temp=first;
    first=second;
    second=temp;
}

int Lomutopart(int A[],int l,int h)
{
    int pivot=A[h]; //always last
    int i=l-1;
    for(int j=l;j<=h-1;j++)
    {
        if(A[j]<pivot)
        {
            i++;
            // swap(A[i],A[j]);
             int temp=A[i];
    A[i]=A[j];
    A[j]=temp;
        }
    }
    // swap(A[i+1],A[h]);
    int temp=A[i+1];
    A[i+1]=A[h];
    A[h]=temp;
    return (i+1);
}

void quickSort(int A[], int low, int high)
{
    if (low < high)
    {
       int  partitionIndex = Lomutopart(A, low, high); 
        quickSort(A, low, partitionIndex - 1);  // sort left subarray 
        quickSort(A, partitionIndex + 1, high); // sort right subarray
    }
}




int main()
{
    int n;
    scanf("%d",&n);

    int A[n];
    for(int i=0;i<n;i++)
    {
        scanf("%d",&A[i]);
    }

   quickSort(A,0,n-1);
    for(int i=0;i<n;i++)
    {
        printf("%d ",A[i]);
    }
    return 0;
}

// #include <stdio.h>

// void printArray(int *A, int n)
// {
//     for (int i = 0; i < n; i++)
//     {
//         printf("%d ", A[i]);
//     }
//     printf("\n");
// }

// int partition(int A[], int low, int high)
// {
//     int pivot = A[low];
//     int i = low + 1;
//     int j = high;
//     int temp;

//     do
//     {
//         while (A[i] <= pivot)
//         {
//             i++;
//         }

//         while (A[j] > pivot)
//         {
//             j--;
//         }

//         if (i < j)
//         {
//             temp = A[i];
//             A[i] = A[j];
//             A[j] = temp;
//         }
//     } while (i < j);

//     // Swap A[low] and A[j]
//     temp = A[low];
//     A[low] = A[j];
//     A[j] = temp;
//     return j;
// }

// void quickSort(int A[], int low, int high)
// {
//     int partitionIndex; // Index of pivot after partition

//     if (low < high)
//     {
//         partitionIndex = partition(A, low, high); 
//         quickSort(A, low, partitionIndex - 1);  // sort left subarray 
//         quickSort(A, partitionIndex + 1, high); // sort right subarray
//     }
// }

// int main()
// {
//     //int A[] = {3, 5, 2, 13, 12, 3, 2, 13, 45};
//     int A[] = {9, 4, 4, 8, 7, 5, 6};
//     // 3, 5, 2, 13, 12, 3, 2, 13, 45
//     // 3, 2, 2, 13i, 12, 3j, 5, 13, 45
//     // 3, 2, 2, 3j, 12i, 13, 5, 13, 45 --> first call to partition returns 3
//     int n = 9;
//     n =7;
//     printArray(A, n);
//     quickSort(A, 0, n - 1);
//     printArray(A, n);
//     return 0;
// }
