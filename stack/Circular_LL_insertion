#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node *next;
};

void LinkedListTraversal(struct node *head)
{
    struct node *ptr = head;
    do
    {
        printf("element=%d\n", ptr->data);
        ptr = ptr->next;
    } while (ptr != head);
}

//CASE--1
struct node *insertAtfirst(struct node *head, int data)
{
    struct node *ptr = (struct node *)malloc(sizeof(struct node));
    ptr->data = data;

    struct node *p = head->next;
    while (p->next != head)
    {
        p = p->next;
    }
    p->next = ptr;
    ptr->next = head;
    head = ptr;
    return head;
};

//CASE--2
struct node *insertAtindex(struct node *head, int data, int index)
{
    struct node *ptr = (struct node *)malloc(sizeof(struct node));
    struct node *p = head;

    int i = 0;
    while (i != index - 1)
    {
        p = p->next;
        i++;
    }

    ptr->data = data;
    ptr->next = p->next;
    p->next = ptr;

    return head;
};

//CASE--3
struct node *insertAtend(struct node *head, int data)
{
    struct node *ptr = (struct node *)malloc(sizeof(struct node));
    ptr->data = data;

    struct node *p = head;
    while (p->next != head)
    {
        p = p->next;
    }
    p->next = ptr;
    ptr->next = head;
    return head;
};

//CASE--4
struct node *insertAfterNode(struct node *head, struct node *prevNode,int data){
       struct node *ptr = (struct node *)malloc(sizeof(struct node));
        ptr->data=data;

        ptr->next=prevNode->next;
        prevNode->next=ptr;

        return head;
};

int main()
{
    struct node *head;
    struct node *second;
    struct node *third;
    struct node *fourth;
    struct node *fifth;

    head = (struct node *)malloc(sizeof(struct node));
    second = (struct node *)malloc(sizeof(struct node));
    third = (struct node *)malloc(sizeof(struct node));
    fourth = (struct node *)malloc(sizeof(struct node));
    fifth = (struct node *)malloc(sizeof(struct node));

    head->data = 5;
    head->next = second;

    second->data = 10;
    second->next = third;

    third->data = 15;
    third->next = fourth;

    fourth->data = 20;
    fourth->next = fifth;

    fifth->data = 25;
    fifth->next = head;

    printf("\n--Circular Linked List Before Insertion--\n");
    LinkedListTraversal(head);
    printf("\n--Circular Linked List After Insertion--\n");
    // head = insertAtfirst(head, 100);
    // head = insertAtindex(head, 200, 1);
    // head=insertAtend(head,100);
    head=insertAfterNode(head,fifth,980);
    LinkedListTraversal(head);

    return 0;
}
