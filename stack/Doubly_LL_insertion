#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node *prev;
    struct node *next;
};

void LinkedListTraversalForward(struct node *head)
{
    struct node *ptr=head;
    while (ptr != NULL)
    {
        printf("element=%d\n", ptr->data);
        ptr = ptr->next;
    }
}
struct node *InsertAtFirst(struct node *head,int data)
{
     struct node *ptr = (struct node *)malloc(sizeof(struct node));
     ptr->data = data;
     ptr->prev=NULL;
     ptr->next=head;
     head->prev=ptr;
     head=ptr;
     return head;
}
struct node *InsertAtLast(struct node *head,int data)
{
     struct node *ptr = (struct node *)malloc(sizeof(struct node));
     struct node*p=head;

     ptr->data = data;
     ptr->prev=NULL;
     ptr->next=NULL;
     while(p->next!=NULL)
     {
         p=p->next;
     }
    //  p->next=ptr;
    p->next=ptr;
    ptr->prev=p;
     
    //  head=ptr;
     return head;
}

struct node *insertAfterPos(struct node *head, int position,int data)
{
    // //  struct node *ptr = (struct node *)malloc(sizeof(struct node));
    // //  ptr->data=data;
    // //  ptr->next=NULL;
    // //  ptr->prev=NULL;

    //  prevNode->next=ptr;
    //  ptr->prev=prevNode;
    // ptr->next=prevNode->next;

    // return head;

    struct node* newP=(struct node *)malloc(sizeof(struct node));
    newP->data=data;
    newP->next=NULL;
    newP->prev=NULL;
    struct node* temp=head;
    struct node* temp2=NULL;

    while (position!=1)
    
    {
        temp=temp->next;
        position--;
    }
    if(temp->next==NULL)
    {
        temp->next=newP;
        newP->prev=temp;
    }
    else{
        temp2=temp->next;
        temp->next=newP;
        temp2->prev=newP;
        newP->next=temp2;
        newP->prev=temp;
    }
    return head;
}
struct node *insertBeforPos(struct node *head, int position,int data)
{
    struct node* newP=(struct node *)malloc(sizeof(struct node));
    newP->data=data;
    newP->next=NULL;
    newP->prev=NULL;
    struct node* temp=head;
    struct node* temp2=NULL;

    while (position>2)
    
    {
        temp=temp->next;
        position--;
    }
    if(position==1)
    {
        newP->next=head;
        head=newP;
    }
    else{
        temp2=temp->next;
        temp->next=newP;
        temp2->prev=newP;
        newP->next=temp2;
        newP->prev=temp;
    }
    return head;
}


int main()
{
     struct node *head;
    struct node *second;
    struct node *third;
    struct node *fourth;
    struct node *fifth;

    head = (struct node *)malloc(sizeof(struct node));
    second = (struct node *)malloc(sizeof(struct node));
    third = (struct node *)malloc(sizeof(struct node));
    fourth = (struct node *)malloc(sizeof(struct node));
    fifth = (struct node *)malloc(sizeof(struct node));

    head->data = 5;
    head->prev=NULL;
    head->next = second;

    second->data = 10;
    second->prev=head;
    second->next = third;

    third->data = 15;
    third->prev=second;
    third->next = fourth;

    fourth->data = 20;
    fourth->prev=third;
    fourth->next = fifth;

    fifth->data = 25;
    fifth->prev=fourth;
    fifth->next = NULL;

    printf("\n--Doubly Linked List Before Insertion(Forward Direction)--\n");
    LinkedListTraversalForward(head);
    // head=InsertAtFirst(head,200);
    // head=InsertAtLast(head,200);
    // head=insertAfterPos(head,3,200);
    head=insertBeforPos(head,1,200);
     printf("\n--Linked List After Insertion--\n");
    LinkedListTraversalForward(head);
    return 0;
}
