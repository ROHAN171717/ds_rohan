#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node *next;
};

void LinkedListTraversal(struct node *ptr)
{
    while (ptr != NULL)
    {
        printf("element=%d\n", ptr->data);
        ptr = ptr->next;
    }
}

//CASE--1
struct node *insertAtfirst(struct node *head, int data)
{
    struct node *ptr = (struct node *)malloc(sizeof(struct node));
    ptr->data = data;

     ptr->next = head;
    return ptr;
};

//CASE--2
struct node *insertAtindex(struct node *head, int data,int index){
       struct node *ptr = (struct node *)malloc(sizeof(struct node));
       struct node *p=head;

       int i=0;
    while(i!=index-1)  
    {
        p=p->next;
        i++;
    }

    ptr->data=data;
    ptr->next=p->next;
    p->next=ptr;

    return head;
};

//CASE--3
struct node *insertAtend(struct node *head, int data)
{
    struct node *ptr = (struct node *)malloc(sizeof(struct node));
    ptr->data = data;

     struct node *p=head;
     while (p->next!=NULL)
     {
         p=p->next;
     }
     p->next=ptr;
     ptr->next=NULL;
     return head;

};

//CASE--4
struct node *insertAfterNode(struct node *head, struct node *prevNode,int data){
       struct node *ptr = (struct node *)malloc(sizeof(struct node));
        ptr->data=data;

        ptr->next=prevNode->next;
        prevNode->next=ptr;

        return head;
};

int main()
{
    struct node *head;
    struct node *second;
    struct node *third;

    head = (struct node *)malloc(sizeof(struct node));
    second = (struct node *)malloc(sizeof(struct node));
    third = (struct node *)malloc(sizeof(struct node));

    head->data = 5;
    head->next = second;

    second->data = 10;
    second->next = third;

    third->data = 20;
    third->next = NULL;

    // printf("\n");
    printf("\n--Linked List Before Insertion--\n");
    LinkedListTraversal(head);
    // printf("\n");
      printf("\n--Linked List After Insertion--\n");
    // head = insertAtfirst(head, 100);
    // head=insertAtindex(head,777,2);
    // head=insertAtend(head,100);
    head=insertAfterNode(head,second,15);
    LinkedListTraversal(head);

    return 0;
}
