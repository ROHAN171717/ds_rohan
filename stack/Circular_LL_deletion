#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node *next;
};


void LinkedListTraversal(struct node *head)
{
    struct node *ptr = head;
    do
    {
        printf("element=%d\n", ptr->data);
        ptr = ptr->next;
    } while (ptr != head);
}

//CASE--1 Deleting the first element from the linked list

struct node *deleteFirstNode(struct node *head)
{
    struct node *ptr = head;
    struct node *p=head;
    // head = head->next;
    // free(ptr);

    while(p->next!=head)
    {
        p=p->next;
    }
    p->next=head->next;
    head=ptr->next;
    free(ptr);
    return head;
}

//CASE--2 Deleting the element at a given index from  the linked list

struct node *deleteAtIndex(struct node *head, int index)
{
    struct node *p = head;
    struct node *q = head->next;

    for (int i = 0; i < index - 1; i++)
    {
        p = p->next;
        q = q->next;
    }
    p->next = q->next;
    free(q);
    return head;
}

//CASE--3 Deleting the last from  the linked list

struct node *deleteAtLast(struct node *head)
{
    struct node *p = head;
    struct node *q = head->next;

    while (q->next != head)
    {
        p = p->next;
        q = q->next;
    }
    p->next = head;
    free(q);
    return head;
}

//CASE--4 Deleting the element with a given value from  the linked list

struct node *deleteWithValue(struct node *head, int value)
{
    struct node *p = head;
    struct node *q = head->next;
    struct node *ptr=head;

    if(p->data==value)
    {
      while(ptr->next!=head)
      {
          ptr=ptr->next;
      }
      ptr->next=head->next;
      head=p->next;
      free(p);
      return head;
       
    }
     
    while (q->data != value && q->next != head)
    {
        p = p->next;
        q = q->next;
    }

    if (q->data == value)
    {
        p->next = q->next;
        free(q);
    }
    return head;
}

int main()
{
   struct node *head;
    struct node *second;
    struct node *third;
    struct node *fourth;
    struct node *fifth;

    head = (struct node *)malloc(sizeof(struct node));
    second = (struct node *)malloc(sizeof(struct node));
    third = (struct node *)malloc(sizeof(struct node));
    fourth = (struct node *)malloc(sizeof(struct node));
    fifth = (struct node *)malloc(sizeof(struct node));

    head->data = 5;
    head->next = second;

    second->data = 10;
    second->next = third;

    third->data = 15;
    third->next = fourth;

    fourth->data = 20;
    fourth->next = fifth;

    fifth->data = 25;
    fifth->next = head;

    printf("\n--Circular Linked List Before Deletion--\n");
    LinkedListTraversal(head);

    //   head = deleteFirstNode(head);
    // head=deleteAtIndex(head,3);
    // head=deleteAtLast(head);
    head = deleteWithValue(head,5);
        printf("\n--Circular Linked List After Deletion--\n");
    LinkedListTraversal(head);

    return 0;
}
